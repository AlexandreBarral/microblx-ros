/*
 * myblock microblx function block (autogenerated, don't edit)
 */

#ifndef MYBLOCK_HPP
#define MYBLOCK_HPP

#include <ubx/ubx.h>
#include <kdlubx/kdl.h>
#include <ros/ros.h>

/* block meta information */
char myblock_meta[] =
	" { doc='A mixed port geometry_msg/Vector3' block,"
	"   realtime=false,"
	"}";

/* declaration of block configuration */
ubx_config_t myblock_config[] = {
	{ .name="topic", .type_name = "char" },
	{ 0 },
};

/* declaration port block ports */
ubx_port_t myblock_ports[] = {
	{ .name="pos", .doc="measured position [m]", .in_type_name="double", .in_data_len=5 },
	{ .name="ctrl_mode", .in_type_name="int32_t", .out_type_name="int32_t", .in_data_len=1, .out_data_len=1 },
	{ 0 },
};

/* declare a struct port_cache */
struct myblock_port_cache {
	ubx_port_t* pos;
	ubx_port_t* ctrl_mode;
};

/* declare a helper function to update the port cache this is necessary
 * because the port ptrs can change if ports are dynamically added or
 * removed. This function should hence be called after all
 * initialization is done, i.e. typically in 'start'
 */
static void update_port_cache(ubx_block_t *b, struct myblock_port_cache *pc)
{
	pc->pos = ubx_port_get(b, "pos");
	pc->ctrl_mode = ubx_port_get(b, "ctrl_mode");
}

/* block operation forward declarations */
int myblock_init(ubx_block_t *b);
int myblock_start(ubx_block_t *b);
void myblock_stop(ubx_block_t *b);
void myblock_cleanup(ubx_block_t *b);
void myblock_step(ubx_block_t *b);


/* put everything together */
ubx_block_t myblock_block = {
	.name = "myblock",
	.meta_data = myblock_meta,
	.type = BLOCK_TYPE_COMPUTATION,

	.ports = myblock_ports,
	.configs = myblock_config,

	/* ops */
	.init = myblock_init,
	.start = myblock_start,
	.stop = myblock_stop,
	.cleanup = myblock_cleanup,
	.step = myblock_step,
};


/* myblock module init and cleanup functions */
int myblock_mod_init(ubx_node_info_t* ni)
{
    return ubx_block_register(ni, &myblock_block);
}

void myblock_mod_cleanup(ubx_node_info_t *ni)
{
	ubx_block_unregister(ni, "myblock");
}


UBX_MODULE_INIT(myblock_mod_init)
UBX_MODULE_CLEANUP(myblock_mod_cleanup)
UBX_MODULE_LICENSE_SPDX(MIT)

#endif
